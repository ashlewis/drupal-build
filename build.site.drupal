#!/bin/bash

# This script creates new drupal install
# it should be run from your new site root directory with:
# $ ./build/build.site.drupal

#read config
DIR="$( cd -P "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

CONFIG_FILE=$DIR/../build.site.conf

if [[ -f $CONFIG_FILE ]]; then
    . $CONFIG_FILE
fi

ENV_CONFIG_FILE=$DIR/../build/build.site.conf.env

if [[ -f $ENV_CONFIG_FILE ]]; then
    . $ENV_CONFIG_FILE
fi

# if password is passed as arg from parent script - use that, otherwise - request user entry
if [[ -n $1 ]]; then
    sudoPassword=$1
fi

if [[ -z $sudoPassword ]]; then
    echo "Enter root user password (for sudo)"
    read -s sudoPassword
fi

# remove existing site @TODO: conditionally
rm -rf ./$siteRootDir
rm -rf ./$privateDir

# make
echo "running make..."

# full install
drush make --working-copy --concurrency=5 ./build/build.site.make ./$siteRootDir/
drush make --working-copy --concurrency=5 ./site.make --no-core --contrib-destination=./modules/contrib

# core update
#drush make --working-copy --concurrency=5 ./build/build.site.make ./$siteRootDir/  --no-recursion

# profile update
#drush make --working-copy --concurrency=5 ./build/build.site.make --no-core --contrib-destination=./$privateDir

# site contrib update
#drush make --working-copy --concurrency=5 ./site.make  --no-core --contrib-destination=./modules_custom

# enter root dir
cd ./$siteRootDir

# install

# @TODO: conditionally
echo "backing up db..."
#drush sql-dump --result-file=../$privateDir/drush.dump.sql --structure-tables-key=common

echo "running install..."
drush si $distro --db-url=mysql://$dbUser:$dbPassword@localhost:3306/$dbName --db-su=$mysqlUser --db-su-pw=$mysqlPassword --site-name="$siteName" --account-name=$accountName --account-pass=$accountPassword -y

# @TODO: conditionally
echo "sync'ing from staging..."
#$DIR/../build/build.site.pull